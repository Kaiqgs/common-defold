local fps = require("common.fps")
local ColyseusClient = require("colyseus.client")
local util = require("common.util")
local ctable = require("common.table")
local network = require("common.network")
local log = require("common.log")
log = log.module("network")

local connect = nil
local reconection_token = false
local function tick(room)
    network.on_tick(room)
end
local function stop_pollin_reconnect(timer_handle)
    timer.cancel(timer_handle)
end
local function while_disconnected(self, client)
    return timer.delay(0.5, true, function()
        if connect ~= nil then
            log:info("trying to reconnect...")
            client:reconnect(reconection_token, connect(self, client))
        else
            log:warn("connect func is not defined")
        end
    end)
end
connect = function(self, client)
    return function(err, room)
        -- code
        if err ~= nil then
            log:error("Join error ", err)
        end
        network.on_connect(room)
        network.on_client_ticked(room)
        log:info("joined successfully", room.sessionId)
        ---@type any
        local timer_handle = false
        self.room = room

        log:info("Binded state change.")
        -- room.state.listen("position", function(current_pos, previous_pos)
        --   log:info("New position")
        --
        --   pprint(current_pos)
        --   pprint(previous_pos)
        -- end)
        --
        -- room.state.listen("velocity", function(current_vel, previous_vel)
        --   log:info("New velocity")
        --   pprint(current_vel)
        --   pprint(previous_vel)
        -- end)

        room.state:on_change(function()
            -- log:info(string.format("state_on_change %s", room.sessionId))
            tick(room)
            if timer_handle then
                stop_pollin_reconnect(timer_handle)
            end
        end)
        -- room:on("state_change", function(state)
        --   log:info("on_state_change")
        --   pprint(state)
        --   -- tick(room)
        --   -- if timer_handle then
        --   --   stop_pollin_reconnect(timer_handle)
        --   -- end
        -- end)

        room:on_message("tick_sync", function(msg)
            network.tick = 0
            log:info("Tick synced.")
        end)

        room:on_message("stats", function(msg)
            print("stats")
            pprint(msg)
            self.tick_stat = msg.tick
            self.time_stat = msg.time
        end)

        room:on_message("ping", function(msg)
            room:send("pong", msg)
        end)

        room:on("error", function(code, message)
            log:error("code => %s, message => %s", code, message)
        end)
        room:on("leave", function(consented)
            -- room:removeAllListeners()
            self.room = nil
            if not consented then
                timer_handle = while_disconnected(self, client)
            end
        end)

        timer.delay(1, true, function()
            room:send("ping")
        end)
    end
end

go.property("tick_stat", 0)
go.property("time_stat", 0)
function init(self)
    self.client = ColyseusClient.new(string.format("ws://%s:2567", network.ip_address))
    self.client:join_or_create("game", {}, connect(self, self.client))
    network.disconnected:subscribe(function(consented)
        self.room:leave(consented or false)
        -- self.client
    end)
    self.time_elapsed = 0
end

function update(self, dt)
    if not self.room then
        return
    end
    self.time_elapsed = self.time_elapsed + dt
    local client_ahead_dif = -math.min(network.tick_dif, -1)
    local client_behind_dif = math.max(network.tick_dif, 1)
    local drop_diff = self.tick_stat  + 5

    network.tick_dif = (self.room.state.tick or 0) - network.tick
    network.tick_stat = self.tick_stat
    if self.time_elapsed >= network.tick_rate_s then
        local n = math.floor(self.time_elapsed / network.tick_rate_s)
        if client_ahead_dif > drop_diff then
            -- print("why am i here")
            -- local excessive_ticks = (client_ahead_dif - drop_diff)
            -- n = n - excessive_ticks
        else
            for _ in util.irange(n + (network.tick_dif == 0 and 1 or 0)) do
                network.on_client_ticked(self.room)
            end
        end
        self.time_elapsed = self.time_elapsed % network.tick_rate_s
    end

    -- for _ = 1, math.max(network.tick_dif, 0) do
    --     log:warn(string.format("skipping %dx ticks ", network.tick_dif))
    --     network.on_client_ticked(self.room)
    -- end

    for key, payload in pairs(network.messages) do
        assert(ctable.find(network.sanitization_messages, key), string.format("Message %s is not sanitized", key))
        -- log:info(string.format("sending `%s`", key))
        self.room:send(key, payload)
    end
    network.clear_messages()
end

function final(self)
    if self.room then
        self.room:leave(false)
    end
    -- websocket
    -- self.room:removeAllListeners()
end
on_message = util.on_message_map({})
